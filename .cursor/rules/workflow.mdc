---
description: Workflow preferences
globs: 
alwaysApply: true
---
# Key Conventions
1. **Follow Laravel's MVC architecture.**
2. **Use Laravel's routing system for defining application endpoints.**
3. **Implement proper request validation using Form Requests.**
4. **Use Laravel's Blade templating engine for views, integrating with Livewire and Alpine.js.**
5. **Implement proper database relationships using Eloquent.**
6. **Use Laravel's built-in authentication scaffolding.**
7. **Implement proper API resource transformations.**
8. **Use Laravel's event and listener system for decoupled code.**

## Coding workflow

- **Focus on the areas of code relevant to the task**
- **Do not touch code that is unrelated to the task**
- **Write thorough tests for all major functionality**.
- **Write concise, technical responses with accurate PHP examples.**
- **Follow Laravel best practices and conventions.**
- **Use object-oriented programming with a focus on SOLID principles.**
- **Prefer iteration and modularization over duplication.**
- **Use descriptive variable and method names.**
- **Favor dependency injection and service containers.**
- **Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly structured**
- **Always think about what other methods and areas of code might be affected by code changes**
- **When using Actions for database operations, stick with model as the part of the namespace. Use appropriate nomenclature: Store{Model} for creating new records, Update{Model} for updating records, Destroy{Model} for deleting records. For example: `App\Actions\User\StoreUser`, `App\Actions\User\UpdateUser`, `App\Actions\User\DestroyUser`.**
- **When composing Blade components, if it requires a typed property, like an Eloquent model, always create a Component class.**
- **When composing Blade components, if the resulting view is shorter then 10 lines, consider using inline component**
- **Focus on the areas of code relevant to the task**
- **Do not touch code that is unrelated to the task**


## PHP and Laravel Core
- **Use PHP 8.3+ features when appropriate (e.g., typed properties, match expressions).**
- **Follow PSR-12 coding standards.**
- **Utilize Laravel's built-in features and helpers when possible.**
- **Follow Laravel's directory structure and naming conventions.**
- **Use lowercase with dashes for directories (e.g., `app/Http/Controllers`).**
- **Implement proper error handling and logging:**
  - **Use Laravel's exception handling and logging features.**
  - **Create custom exceptions when necessary.**
  - **Use try-catch blocks for expected exceptions.**
- **Use Laravel's validation features for form and request validation.**
- **Implement middleware for request filtering and modification.**
- **Utilize Laravel's Eloquent ORM for database interactions.**
- **Use Laravel's query builder for complex database queries.**
- **Implement proper database migrations and seeders.**

## Laravel Best Practices
- **Use Eloquent ORM instead of raw SQL queries when possible.**
- **Implement Repository pattern for data access layer.**
- **Use Laravel's built-in authentication and authorization features.**
- **Utilize Laravel's caching mechanisms for improved performance.**
- **Implement job queues for long-running tasks.**
- **Use Laravel's built-in testing tools (PHPUnit, Pest, Dusk) for unit and feature tests.**
- **Implement API versioning for public APIs.**
- **Use Laravel's localization features for multi-language support.**
- **Implement proper CSRF protection and security measures.**
- **Use Laravel Mix for asset compilation.**
- **Implement proper database indexing for improved query performance.**
- **Use Laravel's built-in pagination features.**
- **Implement proper error logging and monitoring.**
- When writing code, strive to type-hint every parameter and type-hint return.
- When writing code, avoid unnecessary docBlocks when parameters are type-hinted
- When writing code, when necessary, provide simple and easy to understand method description
- When wriring Eloquent queries, consider using tappable scopes to avod leaking internals. For example, instead of writing `->whereNull('user_id')`, consider `->tap(new Orphan())` and write a tappable scope like this:
```php
use Illuminate\Contracts\Database\Query\Builder;

final readonly class Orphan
{
    public function __invoke(Builder $builder): void
    {
        $builder->whereNull('user_id');
    }
}
```

## Livewire Implementation
- **Create modular, reusable Livewire components.**
- **Use Livewire's lifecycle hooks effectively (e.g., `mount`, `updated`, etc.).**
- **Implement real-time validation using Livewire's built-in validation features.**
- **Optimize Livewire components for performance, avoiding unnecessary re-renders.**
- **Integrate Livewire components with Laravel's backend features seamlessly.**

## Alpine.js Usage
- **Use Alpine.js directives (`x-data`, `x-bind`, `x-on`, etc.) for declarative JavaScript functionality.**
- **Implement small, focused Alpine.js components for specific UI interactions.**
- **Combine Alpine.js with Livewire for enhanced interactivity when necessary.**
- **Keep Alpine.js logic close to the HTML it manipulates, preferably inline.**

## Tailwind CSS Styling
- **Utilize Tailwind's utility classes for responsive design.**
- **Implement a consistent color scheme and typography using Tailwind's configuration.**
- **Use Tailwind's `@apply` directive in CSS files for reusable component styles.**
- **Optimize for production by purging unused CSS classes.**

## Performance Optimization
- **Implement lazy loading for Livewire components when appropriate.**
- **Use Laravel's caching mechanisms for frequently accessed data.**
- **Minimize database queries by eager loading relationships.**
- **Implement pagination for large data sets.**
- **Use Laravel's built-in scheduling features for recurring tasks.**

## Security Best Practices
- **Always validate and sanitize user input.**
- **Use Laravel's CSRF protection for all forms.**
- **Implement proper authentication and authorization using Laravel's built-in features.**
- **Use Laravel's prepared statements to prevent SQL injection.**
- **Implement proper database transactions for data integrity.**

## Testing
- **Write functional tests for every class.**
- **Implement feature tests for Livewire components using Laravel's testing tools.**
- **Ensure 100% coverage.**
- **Write Pest tests only.**
- When writing tests make sure to match the namespace, for example for `App\Components\ProgramLocationLookup\ProgramLocationLookupManager` the test should be 
`Tests\Feature\Components\ProgramLocationLookup\ProgramLocationLookupManagerTest`
- When writing tests, use snake_case for test names, begining with 'it_will', for example, `it_will_create_venue_program_location_lookup_driver`
- When writing tests, make sure to add `void` return type
- When writing tests, you may use Model::factory() to create model stubs
- When writing tests, you may mock action classes, for eaxmple:  `ActionClass::mock()->expects('handle')->with($argument)`
- When test generation is complete, run it using `php vendor/bin/pest` to ensure it is not failing
- once the test is successful, make sure to run complete test suit to ensure it is not failing

- When complete, run `php vendor/bin/pint`